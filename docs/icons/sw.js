import{precacheAndRoute}from"workbox-precaching";import{registerRoute}from"workbox-routing";import{NetworkFirst,StaleWhileRevalidate,CacheFirst}from"workbox-strategies";import{CacheableResponsePlugin}from"workbox-cacheable-response";import{ExpirationPlugin}from"workbox-expiration";precacheAndRoute(self.__WB_MANIFEST||[]);const BASE_URL="https://story-api.dicoding.dev/v1",safeUrlOriginMatch=(e,t)=>{try{return new URL(e).origin===t}catch(t){return"development"===process.env.NODE_ENV&&console.error("SW: Invalid URL detected:",e,t),!1}};registerRoute((({request:e})=>safeUrlOriginMatch(e.url,new URL(BASE_URL).origin)&&"image"!==e.destination),new NetworkFirst({cacheName:"geotale-api",plugins:[new CacheableResponsePlugin({statuses:[0,200]})]})),registerRoute((({request:e})=>safeUrlOriginMatch(e.url,new URL(BASE_URL).origin)&&"image"===e.destination),new StaleWhileRevalidate({cacheName:"geotale-api-images",plugins:[new CacheableResponsePlugin({statuses:[0,200]}),new ExpirationPlugin({maxEntries:100,maxAgeSeconds:604800})]})),registerRoute((({request:e})=>"image"===e.destination),new CacheFirst({cacheName:"geotale-external-images",plugins:[new CacheableResponsePlugin({statuses:[0,200]}),new ExpirationPlugin({maxEntries:50,maxAgeSeconds:2592e3})]})),registerRoute((({request:e})=>"navigate"===e.mode),(async({event:e})=>{try{return await new NetworkFirst({cacheName:"geotale-html"}).handle({event:e})}catch(e){return caches.match("/offline.html")}})),self.addEventListener("install",(e=>{console.log("SW installed"),self.skipWaiting()})),self.addEventListener("activate",(e=>{console.log("SW activated"),self.clients.claim()})),self.addEventListener("push",(e=>{console.log("Push notification received",e);let t={title:"Story App",options:{body:"You have a new notification",icon:"/icons/icon-192x192.png",badge:"/icons/badge-72x72.png",data:{}}};if(e.data)try{const i=e.data.json();t.title=i.title||t.title,t.options={...t.options,...i.options||{},data:i.data||{}}}catch(i){console.error("Error parsing push notification data, fallback to text:",i),t.options.body=e.data.text()}e.waitUntil(self.registration.showNotification(t.title,t.options))})),self.addEventListener("notificationclick",(e=>{console.log("Notification clicked",e),e.notification.close();const t=(e.notification.data||{}).url||"/";e.waitUntil(clients.matchAll({type:"window",includeUncontrolled:!0}).then((e=>{for(const i of e)if(i.url===t&&"focus"in i)return i.focus();if(clients.openWindow)return clients.openWindow(t)})))}));